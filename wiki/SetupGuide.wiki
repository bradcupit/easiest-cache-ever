#summary How to setup easiest-cache-ever
#labels Featured

=Webapp using Maven 2=

 * update your pom so it depends on easiest-cache-ever ([#Depending_on_easiest-cache-ever_with_Maven_2 more info])
 * add classpath:easiest-cache-ever-spring.xml to your web.xml's contextConfigLocation param ([#More_Detailed_web.xml_config more info])

See [http://code.google.com/p/easiest-cache-ever/source/browse/#svn/spring-aop-test/trunk this project] for a working demo.

_Note: when using Spring (and not the AspectJ compiler or AspectJ load-time weaver), only public methods can be cache-enabled. Furthermore, when one method in a class calls a public method in itself (or it's subclasses) that cannot be cache-enabled either._

===Depending on easiest-cache-ever with Maven 2===
If easiest cache ever isn't in the maven central repo, you can still depend on it by installing it locally on your machine. Just checkout the source, and run `mvn install`, then depend on easiest-cache-ever like normal in your pom.

===More Detailed web.xml config===
In your web.xml, you probably have something like:
{{{
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext*.xml</param-value>
</context-param>
}}}
just change this line:
{{{
<param-value>classpath:applicationContext*.xml</param-value>
}}}
to this:
{{{
<param-value>classpath:applicationContext*.xml classpath:easiest-cache-ever-spring.xml</param-value>
}}}